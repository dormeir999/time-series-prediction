def get_features_time_dependence(the_df):
    is_fixed_features_df = (the_df.groupby(index_cols)[features_orig].nunique(dropna=False) <= 2).all()
    the_time_fixed_features = is_fixed_features_df[is_fixed_features_df==True].index
    the_time_variant_features = is_fixed_features_df[is_fixed_features_df==False].index
    return the_time_fixed_features, the_time_variant_features

def add_shifted_feature(the_df, feature, n):
    shifted_feature = feature+"_shift_"+str(n)
    the_df[shifted_feature] = the_df.groupby(['id'])[feature].shift(n).values
    the_df[shifted_feature] = the_df.groupby(['id'])[shifted_feature].bfill().values
    the_df[shifted_feature] = the_df[shifted_feature].fillna(the_df[feature].add_suffix("_shift_"+str(n)))
    #print(the_df[shifted_feature].isna().sum().sum())
    return the_df

# Change in utils
def add_shifted_features_for_n_shifts(the_df, features, n_max):
    for n in np.arange(n_max)+1:
        print(n)
        the_df = add_shifted_feature(the_df, features, n)
    return the_df

def add_feature_rolling_n_aggregators(the_df, groupby_col, feature, n, std_fillna_val=0):
    # calc rolling
    aggregated_features = the_df.groupby(groupby_col)[feature].rolling(n, min_periods=0).agg(['min','max','mean','std']).fillna(std_fillna_val).reset_index(drop=True).drop(columns='level_1', errors='ignore')
    # col names formatting
    aggregated_features_cols = aggregated_features.columns.to_frame()
    aggregated_features_cols[0] = aggregated_features_cols[0] + "_rolling_" + str(n) + "_" + aggregated_features_cols[1]
    aggregated_features.columns = aggregated_features_cols[0]
    # concat
    the_df = pd.concat([data,aggregated_features],axis=1)
    return the_df

def add_aggregated_features_for_n_rollings(the_df, groupby_col, features, n_max, std_fillna_val=0):
    for n in np.arange(1, n_max)+1:
        print(n)
        the_df = add_feature_rolling_n_aggregators(the_df, groupby_col, features, n, std_fillna_val)
    return the_df
    
# for add_aggregated:
time_variant_features_numeric = df[time_variant_features].describe().columns
features = [col for col in time_variant_features_numeric if not 'year' in col if not 'mean' in col if not 'pct_change' in col if not 'cumsum' in col if not 'encoded' in col]


def linear_transformations(the_df, features):
    # Quadratic model
    temp = np.square(data[features]).add_suffix("_squared")
    the_df = pd.concat([the_df, temp], axis=1)
    # Quadratic square model
    temp = np.sqrt(np.abs(the_df[features])).add_suffix("_root_squared")
    the_df = pd.concat([the_df, temp], axis=1)
    # Reciprocal model
    temp = (1/(np.abs(the_df[features])+1)).add_suffix("_inversed")
    the_df = pd.concat([the_df, temp], axis=1)
    # logarithmic smoothing
    temp = np.log(np.abs(the_df[features])+0.001).add_suffix("_log")
    the_df = pd.concat([the_df, temp], axis=1)
    return the_df
